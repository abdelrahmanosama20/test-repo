package Components;

import java.util.HashMap;
import java.util.Map;

public class Memory {
    public byte[] memory;
//byte[] memory = {100, 200, 50, 75, 120}; the elements would be any number that makes up a byte 
    
    public Memory(int SizeOfTheByteMemory) {
    	//The input is how many single byte elements will the Mmeory hold 
        this.memory = new byte[SizeOfTheByteMemory]; // Initialize memory with given size

    }
    
    //What will we need here ? 
    //Writing a single byte , Filling A single element
    // The address is the index , the byte is what we will store in the index 
    public void writeByte(int address, byte value) {
        if (address >= 0 && address < memory.length) {
            memory[address] = value;
        } else {
            System.out.println("Memory address out of bounds.");
        }
    }
    //If we want to write a word , 4 bytes , takes the initial address where we will place the first byte of the word
      //Add 3 , and takes the array of bytes as an input
    public void writeWord(int address, byte[] values) {
        if (address >= 0 && address + 3 < memory.length && values.length == 4) {
            for (int i = 0; i < 4; i++) {
                memory[address + i] = values[i];
            }
        } else {
            System.out.println("Memory address out of bounds or invalid word size.");
        }
    }
//Reading a single byte , accessing one element
    public byte readByte(int address) {
        if (address >= 0 && address < memory.length) {
            return memory[address];
        } else {
            System.out.println("Memory address out of bounds.");
            return -1; // Returning -1 to indicate error, can handle differently.
        }
    }

    public byte[] readWord(int address) {
        if (address >= 0 && address + 3 < memory.length) {
            byte[] word = new byte[4];
            for (int i = 0; i < 4; i++) {
                word[i] = memory[address + i];
            }
            return word;
        } else {
            System.out.println("Memory address out of bounds.");
            return null; // Returning null to indicate error, can handle differently.
        }
    }

    

}

